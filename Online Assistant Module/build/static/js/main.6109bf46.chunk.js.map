{"version":3,"sources":["aws-exports.js","App.js","serviceWorker.js","index.js"],"names":["awsmobile","Amplify","configure","awsconfig","myTheme","AmplifyTheme","sectionHeader","backgroundColor","App","err","confirmation","alert","console","log","JSON","stringify","className","ChatBot","title","theme","botName","welcomeMessage","onComplete","this","handleComplete","bind","clearOnComplete","conversationModeOn","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gPAmBeA,EAhBG,CACd,mBAAsB,YACtB,6BAAgC,iDAChC,mBAAsB,YACtB,MAAS,GACT,SAAY,SACZ,gBAAmB,CACf,CACI,KAAQ,uBACR,MAAS,UACT,OAAU,eCRtBC,UAAQC,UAAUC,GAGlB,IAAMC,EAAO,2BACRC,KADQ,IAEXC,cAAc,2BACTD,IAAaC,eADL,IAEXC,gBAAiB,cAsCNC,E,6KAhCEC,EAAKC,GAClB,OAAID,GACFE,MAAM,2BACC,qBAITA,MAAM,WACNC,QAAQC,IAAIC,KAAKC,UAAUL,EAAc,KAAM,IACxC,sD,+BAIP,OACE,yBAAKM,UAAU,OACb,4BAAQA,UAAU,cAChB,wBAAIA,UAAU,aAAd,4CAEF,kBAACC,EAAA,EAAD,CACEC,MAAM,2BACNC,MAAOf,EACPgB,QAAQ,uBACRC,eAAe,qCACfC,WAAYC,KAAKC,eAAeC,KAAKF,MACrCG,iBAAiB,EACjBC,oBAAoB,S,GA3BZC,aCJEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlC,QAAQkC,MAAMA,EAAMC,a","file":"static/js/main.6109bf46.chunk.js","sourcesContent":["/* eslint-disable */\n// WARNING: DO NOT EDIT. This file is automatically generated by AWS Amplify. It will be overwritten.\n\nconst awsmobile = {\n    \"aws_project_region\": \"us-east-1\",\n    \"aws_cognito_identity_pool_id\": \"us-east-1:6cfb00ac-248f-4016-8f11-77ca745adb4e\",\n    \"aws_cognito_region\": \"us-east-1\",\n    \"oauth\": {},\n    \"aws_bots\": \"enable\",\n    \"aws_bots_config\": [\n        {\n            \"name\": \"onlineAssistantC_dev\",\n            \"alias\": \"$LATEST\",\n            \"region\": \"us-east-1\"\n        }\n    ]\n};\n\n\nexport default awsmobile;\n","import React, { Component } from 'react';\nimport Amplify, { Interactions } from 'aws-amplify';\nimport { ChatBot, AmplifyTheme } from 'aws-amplify-react';\nimport awsconfig from './aws-exports';\n\nAmplify.configure(awsconfig);\n\n// Imported default theme can be customized by overloading attributes\nconst myTheme = {\n  ...AmplifyTheme,\n  sectionHeader: {\n    ...AmplifyTheme.sectionHeader,\n    backgroundColor: '#ff6600'\n  }\n};\n\nclass App extends Component {\n\n  handleComplete(err, confirmation) {\n    if (err) {\n      alert('Bot conversation failed')\n      return 'Please try again';\n    }\n\n    //alert('Success: ' + JSON.stringify(confirmation, null, 2));\n    alert('Success');\n    console.log(JSON.stringify(confirmation, null, 2));\n    return 'Done. Thank you! what would you like to do next?';\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1 className=\"App-title\">Welcome to the Online Support Assistant</h1>\n        </header>\n        <ChatBot\n          title=\"Online Support Assistant\"\n          theme={myTheme}\n          botName=\"onlineAssistantC_dev\"\n          welcomeMessage=\"Welcome, how can I help you today?\"\n          onComplete={this.handleComplete.bind(this)}\n          clearOnComplete={true}\n          conversationModeOn={false}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n/* import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n */","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}